#include <iostream>
#include <fstream>
#include <cstdlib>      // for generating random numbers
#include <ctime>        // to specify a seed
#include <string>
#include "Analyzer.h"
#include "BinaryReader.h"
#include "DuplicateAnalyser.h"
#include "MissingAnalyzer.h"
#include "StatisticsAnalyzer.h"

using namespace std;

// Define the constant for array size
const int SIZE = 1000;

// Function prototypes
void writeBinary(int* values, int length, const string& name);  // Module 2 - Gerardo Castro, modified per Module 2

void createBinaryFile(const string& name, int length);  // Module 2 - Gerardo Castro, added per Module 2

// Main function
int main() {

    // Making the first call to create binary file
    const string FILENAME = "binary.dat";
    createBinaryFile(FILENAME, SIZE);                   // using global constant

    BinaryReader b1(FILENAME);                          // b1 is our first binary reader instance variable

    b1.display();                                       // to replace writing a loop per instructions


    // Create one instance of each analyzer and call analyze()
    StatisticsAnalyzer stats(b1.getValues(), b1.getSize()); 
    DuplicateAnalyser dup(b1.getValues(), b1.getSize());    
    MissingAnalyzer miss(b1.getValues(), b1.getSize());   

    cout << stats.analyze() << endl;
    cout << dup.analyze() << endl;
    cout << miss.analyze() << endl;

    return 0;
}


/**
    Opens a binary file to store the binary data
    @param values the array holding the elements, first value being the size of binary data
    @param length the size of the binary data as indicated by first element in array
    @param the name of the file used to write to binary data
*/
void writeBinary(int* values, int length, const string& name) 
{
    ofstream outFile(name, ios::binary); // open file in binary mode
    if (!outFile) {
        cerr << "Error opening file for writing." << endl;
        return;
    }

    // Write array length first
    outFile.write(reinterpret_cast<char*>(&length), sizeof(length));

    // Write array contents
    outFile.write(reinterpret_cast<char*>(values), length * sizeof(int));

    outFile.close();
}

/**
    Creates a dynamic array of random numbers, with the first value being the size of binary data,
    not the size of the newly created array.
    @param name the name of the file
    @length the size of array, first value generated by seed random number generator
*/
void createBinaryFile(const string& name, int length)   // Module 2 - Gerardo Castro
{
    int* arr = new int[length];

    srand(static_cast<unsigned int>(time(0)));          // seed random number generator

    for (int i = 0; i < length; i++) {
        arr[i] = rand() % 1000;                         // fill with random numbers 0â€“999
    }

    int arr_size = arr[0];                              // the first value, this will be the size of binary data

    writeBinary(arr, arr_size, name);                   // Added call per Module 2

}




